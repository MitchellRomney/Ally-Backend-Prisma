### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Champion {
  blurb: String!
  champId: String!
  dateCreated: DateTime!
  dateModified: DateTime!
  id: Int!
  imageFull: String!
  imageGroup: String!
  imageH: Int!
  imageSprite: String!
  imageW: Int!
  imageX: Int!
  imageY: Int!
  infoAttack: Int!
  infoDefense: Int!
  infoDifficulty: Int!
  infoMagic: Int!
  key: String!
  name: String!
  partype: String!
  statsArmor: Float!
  statsArmorPerLevel: Float!
  statsAttackDamage: Float!
  statsAttackDamagePerLevel: Float!
  statsAttackRange: Float!
  statsAttackSpeed: Float!
  statsAttackSpeedPerLevel: Float!
  statsCrit: Float!
  statsCritPerLevel: Float!
  statsHP: Float!
  statsHPPerLevel: Float!
  statsHPRegen: Float!
  statsHPRegenPerLevel: Float!
  statsMoveSpeed: Float!
  statsMP: Float!
  statsMPPerLevel: Float!
  statsMPRegen: Float!
  statsMPRegenPerLevel: Float!
  statsSpellBlock: Float!
  statsSpellBlockPerLevel: Float!
  tags: [String!]!
  title: String!
  version: String!
}

input ChampionWhereUniqueInput {
  champId: String
  id: Int
  key: String
}

scalar DateTime

type Item {
  builtFrom(after: ItemWhereUniqueInput, before: ItemWhereUniqueInput, first: Int, last: Int, skip: Int): [Item!]!
  builtInto(after: ItemWhereUniqueInput, before: ItemWhereUniqueInput, first: Int, last: Int, skip: Int): [Item!]!
  colloq: String!
  consumed: Boolean!
  consumeOnFull: Boolean!
  depth: Int!
  description: String!
  flatArmorMod: Int!
  flatAttackSpeedMod: Int!
  flatBlockMod: Int!
  flatCritChanceMod: Int!
  flatCritDamageMod: Int!
  flatEnergyPoolMod: Int!
  flatEnergyRegenMod: Int!
  flatExpBonus: Int!
  flatHPPoolMod: Int!
  flatHPRegenMod: Int!
  flatMagicDamageMod: Int!
  flatMovementSpeedMod: Int!
  flatMPPoolMod: Int!
  flatMPRegenMod: Int!
  flatPhysicalDamageMod: Int!
  flatSpellBlockMod: Int!
  goldBase: Int!
  goldPurchasable: Boolean!
  goldSell: Int!
  goldTotal: Int!
  hideFromAll: Boolean!
  imageFull: String!
  imageGroup: String!
  imageH: Int!
  imageSprite: String!
  imageW: Int!
  imageX: Int!
  imageY: Int!
  inStore: Boolean!
  itemId: Int!
  name: String!
  percentArmorMod: Int!
  percentAttackSpeedMod: Int!
  percentBlockMod: Int!
  percentCritChanceMod: Int!
  percentCritDamageMod: Int!
  percentDodgeMod: Int!
  percentExpBonus: Int!
  percentHPPoolMod: Int!
  percentHPRegenMod: Int!
  percentLifeStealMod: Int!
  percentMagicDamageMod: Int!
  percentMovementSpeedMod: Int!
  percentMPPoolMod: Int!
  percentMPRegenMod: Int!
  percentPhysicalDamageMod: Int!
  percentSpellBlockMod: Int!
  percentSpellVampMod: Int!
  plaintext: String!
  requiredAlly: String!
  requiredChampion: String!
  rFlatArmorModPerLevel: Int!
  rFlatArmorPenetrationMod: Int!
  rFlatArmorPenetrationModPerLevel: Int!
  rFlatCritChanceModPerLevel: Int!
  rFlatCritDamageModPerLevel: Int!
  rFlatDodgeMod: Int!
  rFlatDodgeModPerLevel: Int!
  rFlatEnergyModPerLevel: Int!
  rFlatEnergyRegenModPerLevel: Int!
  rFlatGoldPer10Mod: Int!
  rFlatHPModPerLevel: Int!
  rFlatHPRegenModPerLevel: Int!
  rFlatMagicDamageModPerLevel: Int!
  rFlatMagicPenetrationMod: Int!
  rFlatMagicPenetrationModPerLevel: Int!
  rFlatMovementSpeedModPerLevel: Int!
  rFlatMPModPerLevel: Int!
  rFlatMPRegenModPerLevel: Int!
  rFlatPhysicalDamageModPerLevel: Int!
  rFlatSpellBlockModPerLevel: Int!
  rFlatTimeDeadMod: Int!
  rFlatTimeDeadModPerLevel: Int!
  rPercentArmorPenetrationMod: Int!
  rPercentArmorPenetrationModPerLevel: Int!
  rPercentAttackSpeedModPerLevel: Int!
  rPercentCooldownMod: Int!
  rPercentCooldownModPerLevel: Int!
  rPercentMagicPenetrationMod: Int!
  rPercentMagicPenetrationModPerLevel: Int!
  rPercentMovementSpeedModPerLevel: Int!
  rPercentTimeDeadMod: Int!
  rPercentTimeDeadModPerLevel: Int!
  specialRecipe: Int!
  stacks: Int!
  version: String!
}

input ItemWhereUniqueInput {
  itemId: Int
}

type Match {
  dateCreated: DateTime!
  dateModified: DateTime!
  gameDuration: Int!
  gameId: Int!
  gameMode: String!
  gameType: String!
  gameVersion: String!
  id: Int!
  mapId: Int!
  queueId: Int!
  seasonId: Int!
  server: String!
  timestamp: DateTime!
}

type MatchEvent {
  assistingParticipantIds: [Int!]!
  buildingType: String!
  creatorId: Int!
  id: Int!
  itemId: Int!
  killerId: Int!
  laneType: String!
  levelUpType: String!
  match: Match!
  monsterSubType: String!
  monsterType: String!
  participantId: Int!
  positionX: Int!
  positionY: Int!
  skillSlot: Int!
  teamId: Int!
  timestamp: Int!
  towerType: String!
  type: String!
  victimId: Int!
  wardType: String!
}

type Mutation {
  addSummonerToUser(server: String!, summonerId: String!, userId: Int): User!
  login(password: String!, username: String!): AuthPayload!
  signup(email: String!, password: String!, username: String): AuthPayload!
  updateStaticData: SystemStaticDataUpdate!
}

type Participant {
  assists: Int!
  champion: Champion!
  champLevel: Int!
  combatPlayerScore: Int!
  cs10Deltas: [Int!]!
  damageDealtToObjectives: Int!
  damageDealtToTurrets: Int!
  damageSelfMitigated: Int!
  dateCreated: DateTime!
  dateModified: DateTime!
  deaths: Int!
  doubleKills: Int!
  firstBloodAssist: Boolean!
  firstBloodKill: Boolean!
  firstInhibitorAssist: Boolean!
  firstInhibitorKill: Boolean!
  firstTowerAssist: Boolean!
  firstTowerKill: Boolean!
  goldEarned: Int!
  goldSpent: Int!
  id: Int!
  inhibitorKills: Int!
  item0: Int!
  item1: Int!
  item2: Int!
  item3: Int!
  item4: Int!
  item5: Int!
  item6: Int!
  killingSprees: Int!
  kills: Int!
  largestCriticalStrike: Int!
  largestKillingSpree: Int!
  largestMultiKill: Int!
  longestTimeSpentLiving: Int!
  magicalDamageTaken: Int!
  magicDamageDealt: Int!
  magicDamageDealtToChampions: Int!
  match: Match!
  matchHistoryUri: String!
  neutralMinionsKilled: Int!
  neutralMinionsKilledEnemyJungle: Int!
  neutralMinionsKilledTeamJungle: Int!
  objectivePlayerScore: Int!
  participantId: Int!
  pentaKills: Int!
  perk0: Int!
  perk0Var1: Int!
  perk0Var2: Int!
  perk0Var3: Int!
  perk1: Int!
  perk1Var1: Int!
  perk1Var2: Int!
  perk1Var3: Int!
  perk2: Int!
  perk2Var1: Int!
  perk2Var2: Int!
  perk2Var3: Int!
  perk3: Int!
  perk3Var1: Int!
  perk3Var2: Int!
  perk3Var3: Int!
  perk4: Int!
  perk4Var1: Int!
  perk4Var2: Int!
  perk4Var3: Int!
  perk5: Int!
  perk5Var1: Int!
  perk5Var2: Int!
  perk5Var3: Int!
  perkPrimaryStyle: Int!
  perkSubStyle: Int!
  physicalDamageDealt: Int!
  physicalDamageDealtToChampions: Int!
  physicalDamageTaken: Int!
  platformId: String!
  playerScore0: Int!
  playerScore1: Int!
  playerScore2: Int!
  playerScore3: Int!
  playerScore4: Int!
  playerScore5: Int!
  playerScore6: Int!
  playerScore7: Int!
  playerScore8: Int!
  playerScore9: Int!
  position: String!
  quadraKills: Int!
  sightWardsBoughtInGame: Int!
  skillOrder: [String!]!
  spell1Id: Int!
  spell2Id: Int!
  statPerk0: Int!
  statPerk1: Int!
  statPerk2: Int!
  summoner: Summoner!
  teamId: Int!
  timeCCingOthers: Int!
  totalDamageDealt: Int!
  totalDamageDealtToChampions: Int!
  totalDamageTaken: Int!
  totalHeal: Int!
  totalMinionsKilled: Int!
  totalPlayerScore: Int!
  totalScoreRank: Int!
  totalTimeCrowdControlDealt: Int!
  totalUnitsHealed: Int!
  tripleKills: Int!
  trueDamageDealt: Int!
  trueDamageDealtToChampions: Int!
  trueDamageTaken: Int!
  turretKills: Int!
  unrealKills: Int!
  visionScore: Int!
  visionWardsBoughtInGame: Int!
  wardsKilled: Int!
  wardsPlaced: Int!
  win: Boolean!
}

type ParticipantFrame {
  current_gold: Int!
  id: Int!
  jungle_minions_killed: Int!
  level: Int!
  match: Match!
  minions_killed: Int!
  participant_id: Int!
  position_x: Int!
  position_y: Int!
  timestamp: Int!
  total_gold: Int!
  xp: Int!
}

type PlatformStatistics {
  latestVersion: String!
  totalMatches: Int!
  totalSummoners: Int!
  totalUsers: Int!
}

type Query {
  allChampions: [Champion!]
  allSummoners: [Summoner!]
  getQuickStats(accountId: String!, server: String!, summonerId: String!): [QuickStat!]
  getSummonerParticipants(accountId: String!, amount: Int, server: String!, summonerId: String!): [Participant!]!
  getSummonerProfile(server: String!, summonerName: String!): SummonerProfile
  me: User
  platformStatistics: PlatformStatistics
  summoner(server: String!, summonerId: String, summonerName: String!): Summoner
}

type QuickStat {
  growth: String!
  icon: String!
  significant: Boolean!
  suffix: String!
  title: String!
  value: String!
}

type Rune {
  icon: String!
  key: String!
  longDesc: String!
  name: String!
  runeId: Int!
  shortDesc: String!
  version: String!
}

input ServerSummonerIdCompoundUniqueInput {
  server: String!
  summonerId: String!
}

input ServerSummonerNameCompoundUniqueInput {
  server: String!
  summonerName: String!
}

type Summoner {
  accountId: String!
  id: Int!
  profileIconId: Int!
  puuid: String!
  server: String!
  summonerId: String!
  summonerLevel: Int!
  summonerName: String!
  user: User
}

type SummonerProfile {
  matches: [Participant!]
  quickStats: [QuickStat!]
  summoner: Summoner
}

type SummonerSpell {
  cooldown: Int!
  cooldownBurn: String!
  cost: Int!
  costBurn: String!
  costType: String!
  description: String!
  imageFull: String!
  imageGroup: String!
  imageH: Int!
  imageSprite: String!
  imageW: Int!
  imageX: Int!
  imageY: Int!
  key: Int!
  maxAmmo: String!
  maxRank: Int!
  name: String!
  range: Int!
  rangeBurn: String!
  resource: String!
  summonerLevel: Int!
  summonerSpellId: String!
  tooltip: String!
  version: String!
}

input SummonerWhereUniqueInput {
  id: Int
  server_summonerId: ServerSummonerIdCompoundUniqueInput
  server_summonerName: ServerSummonerNameCompoundUniqueInput
}

type SystemStaticDataUpdate {
  ChampionsUpdated: Boolean!
  ItemsUpdated: Boolean!
  LatestPatch: String!
  RunesUpdated: Boolean!
  SummonerSpellsUpdated: Boolean!
}

type Team {
  bans(after: ChampionWhereUniqueInput, before: ChampionWhereUniqueInput, first: Int, last: Int, skip: Int): [Champion!]!
  baronKills: Int!
  dateCreated: DateTime!
  dateModified: DateTime!
  dominionVictoryScore: Int!
  dragonKills: Int!
  firstBaron: Boolean!
  firstBlood: Boolean!
  firstDragon: Boolean!
  firstInhibitor: Boolean!
  firstRiftHerald: Boolean!
  firstTower: Boolean!
  id: Int!
  inhibitorKills: Int!
  match: Match
  riftHeraldKills: Int!
  teamId: Int!
  towerKills: Int!
  vilemawKills: Int!
  win: Boolean!
}

type User {
  email: String!
  isAdmin: Boolean!
  summoners(after: SummonerWhereUniqueInput, before: SummonerWhereUniqueInput, first: Int, last: Int, skip: Int): [Summoner!]!
  userId: Int!
  username: String
}
