/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context"
import * as client from "@prisma/client"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ChampionWhereUniqueInput: { // input type
    champId?: string | null; // String
    id?: number | null; // Int
    key?: string | null; // String
  }
  ItemWhereUniqueInput: { // input type
    itemId?: number | null; // Int
  }
  ServerSummonerIdCompoundUniqueInput: { // input type
    server: string; // String!
    summonerId: string; // String!
  }
  ServerSummonerNameCompoundUniqueInput: { // input type
    server: string; // String!
    summonerName: string; // String!
  }
  SummonerWhereUniqueInput: { // input type
    id?: number | null; // Int
    server_summonerId?: NexusGenInputs['ServerSummonerIdCompoundUniqueInput'] | null; // ServerSummonerIdCompoundUniqueInput
    server_summonerName?: NexusGenInputs['ServerSummonerNameCompoundUniqueInput'] | null; // ServerSummonerNameCompoundUniqueInput
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Champion: client.Champion;
  Item: client.Item;
  Match: client.Match;
  MatchEvent: client.MatchEvent;
  Mutation: {};
  Participant: client.Participant;
  ParticipantFrame: client.ParticipantFrame;
  Query: {};
  QuickStat: { // root type
    growth: number; // Int!
    icon: string; // String!
    significant: boolean; // Boolean!
    suffix: string; // String!
    title: string; // String!
    value: number; // Int!
  }
  Rune: client.Rune;
  Summoner: client.Summoner;
  SummonerSpell: client.SummonerSpell;
  SystemStaticDataUpdate: { // root type
    ChampionsUpdated: boolean; // Boolean!
    ItemsUpdated: boolean; // Boolean!
    LatestPatch: string; // String!
    RunesUpdated: boolean; // Boolean!
    SummonerSpellsUpdated: boolean; // Boolean!
  }
  Team: client.Team;
  User: client.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ChampionWhereUniqueInput: NexusGenInputs['ChampionWhereUniqueInput'];
  ItemWhereUniqueInput: NexusGenInputs['ItemWhereUniqueInput'];
  ServerSummonerIdCompoundUniqueInput: NexusGenInputs['ServerSummonerIdCompoundUniqueInput'];
  ServerSummonerNameCompoundUniqueInput: NexusGenInputs['ServerSummonerNameCompoundUniqueInput'];
  SummonerWhereUniqueInput: NexusGenInputs['SummonerWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Champion: { // field return type
    blurb: string; // String!
    champId: string; // String!
    dateCreated: any; // DateTime!
    dateModified: any; // DateTime!
    id: number; // Int!
    imageFull: string; // String!
    imageGroup: string; // String!
    imageH: number; // Int!
    imageSprite: string; // String!
    imageW: number; // Int!
    imageX: number; // Int!
    imageY: number; // Int!
    infoAttack: number; // Int!
    infoDefense: number; // Int!
    infoDifficulty: number; // Int!
    infoMagic: number; // Int!
    key: string; // String!
    name: string; // String!
    partype: string; // String!
    statsArmor: number; // Float!
    statsArmorPerLevel: number; // Float!
    statsAttackDamage: number; // Float!
    statsAttackDamagePerLevel: number; // Float!
    statsAttackRange: number; // Float!
    statsAttackSpeed: number; // Float!
    statsAttackSpeedPerLevel: number; // Float!
    statsCrit: number; // Float!
    statsCritPerLevel: number; // Float!
    statsHP: number; // Float!
    statsHPPerLevel: number; // Float!
    statsHPRegen: number; // Float!
    statsHPRegenPerLevel: number; // Float!
    statsMoveSpeed: number; // Float!
    statsMP: number; // Float!
    statsMPPerLevel: number; // Float!
    statsMPRegen: number; // Float!
    statsMPRegenPerLevel: number; // Float!
    statsSpellBlock: number; // Float!
    statsSpellBlockPerLevel: number; // Float!
    tags: string[]; // [String!]!
    title: string; // String!
    version: string; // String!
  }
  Item: { // field return type
    builtFrom: NexusGenRootTypes['Item'][]; // [Item!]!
    builtInto: NexusGenRootTypes['Item'][]; // [Item!]!
    colloq: string; // String!
    consumed: boolean; // Boolean!
    consumeOnFull: boolean; // Boolean!
    depth: number; // Int!
    description: string; // String!
    flatArmorMod: number; // Int!
    flatAttackSpeedMod: number; // Int!
    flatBlockMod: number; // Int!
    flatCritChanceMod: number; // Int!
    flatCritDamageMod: number; // Int!
    flatEnergyPoolMod: number; // Int!
    flatEnergyRegenMod: number; // Int!
    flatExpBonus: number; // Int!
    flatHPPoolMod: number; // Int!
    flatHPRegenMod: number; // Int!
    flatMagicDamageMod: number; // Int!
    flatMovementSpeedMod: number; // Int!
    flatMPPoolMod: number; // Int!
    flatMPRegenMod: number; // Int!
    flatPhysicalDamageMod: number; // Int!
    flatSpellBlockMod: number; // Int!
    goldBase: number; // Int!
    goldPurchasable: boolean; // Boolean!
    goldSell: number; // Int!
    goldTotal: number; // Int!
    hideFromAll: boolean; // Boolean!
    imageFull: string; // String!
    imageGroup: string; // String!
    imageH: number; // Int!
    imageSprite: string; // String!
    imageW: number; // Int!
    imageX: number; // Int!
    imageY: number; // Int!
    inStore: boolean; // Boolean!
    itemId: number; // Int!
    name: string; // String!
    percentArmorMod: number; // Int!
    percentAttackSpeedMod: number; // Int!
    percentBlockMod: number; // Int!
    percentCritChanceMod: number; // Int!
    percentCritDamageMod: number; // Int!
    percentDodgeMod: number; // Int!
    percentExpBonus: number; // Int!
    percentHPPoolMod: number; // Int!
    percentHPRegenMod: number; // Int!
    percentLifeStealMod: number; // Int!
    percentMagicDamageMod: number; // Int!
    percentMovementSpeedMod: number; // Int!
    percentMPPoolMod: number; // Int!
    percentMPRegenMod: number; // Int!
    percentPhysicalDamageMod: number; // Int!
    percentSpellBlockMod: number; // Int!
    percentSpellVampMod: number; // Int!
    plaintext: string; // String!
    requiredAlly: string; // String!
    requiredChampion: string; // String!
    rFlatArmorModPerLevel: number; // Int!
    rFlatArmorPenetrationMod: number; // Int!
    rFlatArmorPenetrationModPerLevel: number; // Int!
    rFlatCritChanceModPerLevel: number; // Int!
    rFlatCritDamageModPerLevel: number; // Int!
    rFlatDodgeMod: number; // Int!
    rFlatDodgeModPerLevel: number; // Int!
    rFlatEnergyModPerLevel: number; // Int!
    rFlatEnergyRegenModPerLevel: number; // Int!
    rFlatGoldPer10Mod: number; // Int!
    rFlatHPModPerLevel: number; // Int!
    rFlatHPRegenModPerLevel: number; // Int!
    rFlatMagicDamageModPerLevel: number; // Int!
    rFlatMagicPenetrationMod: number; // Int!
    rFlatMagicPenetrationModPerLevel: number; // Int!
    rFlatMovementSpeedModPerLevel: number; // Int!
    rFlatMPModPerLevel: number; // Int!
    rFlatMPRegenModPerLevel: number; // Int!
    rFlatPhysicalDamageModPerLevel: number; // Int!
    rFlatSpellBlockModPerLevel: number; // Int!
    rFlatTimeDeadMod: number; // Int!
    rFlatTimeDeadModPerLevel: number; // Int!
    rPercentArmorPenetrationMod: number; // Int!
    rPercentArmorPenetrationModPerLevel: number; // Int!
    rPercentAttackSpeedModPerLevel: number; // Int!
    rPercentCooldownMod: number; // Int!
    rPercentCooldownModPerLevel: number; // Int!
    rPercentMagicPenetrationMod: number; // Int!
    rPercentMagicPenetrationModPerLevel: number; // Int!
    rPercentMovementSpeedModPerLevel: number; // Int!
    rPercentTimeDeadMod: number; // Int!
    rPercentTimeDeadModPerLevel: number; // Int!
    specialRecipe: number; // Int!
    stacks: number; // Int!
    version: string; // String!
  }
  Match: { // field return type
    dateCreated: any; // DateTime!
    dateModified: any; // DateTime!
    gameDuration: number; // Int!
    gameId: number; // Int!
    gameMode: string; // String!
    gameType: string; // String!
    gameVersion: string; // String!
    id: number; // Int!
    mapId: number; // Int!
    queueId: number; // Int!
    seasonId: number; // Int!
    server: string; // String!
    timestamp: any; // DateTime!
  }
  MatchEvent: { // field return type
    assistingParticipantIds: number[]; // [Int!]!
    buildingType: string; // String!
    creatorId: number; // Int!
    id: number; // Int!
    itemId: number; // Int!
    killerId: number; // Int!
    laneType: string; // String!
    levelUpType: string; // String!
    match: NexusGenRootTypes['Match']; // Match!
    monsterSubType: string; // String!
    monsterType: string; // String!
    participantId: number; // Int!
    positionX: number; // Int!
    positionY: number; // Int!
    skillSlot: number; // Int!
    teamId: number; // Int!
    timestamp: number; // Int!
    towerType: string; // String!
    type: string; // String!
    victimId: number; // Int!
    wardType: string; // String!
  }
  Mutation: { // field return type
    addSummonerToUser: NexusGenRootTypes['User']; // User!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    updateStaticData: NexusGenRootTypes['SystemStaticDataUpdate']; // SystemStaticDataUpdate!
  }
  Participant: { // field return type
    assists: number; // Int!
    champion: NexusGenRootTypes['Champion']; // Champion!
    champLevel: number; // Int!
    combatPlayerScore: number; // Int!
    cs10Deltas: number[]; // [Int!]!
    damageDealtToObjectives: number; // Int!
    damageDealtToTurrets: number; // Int!
    damageSelfMitigated: number; // Int!
    dateCreated: any; // DateTime!
    dateModified: any; // DateTime!
    deaths: number; // Int!
    doubleKills: number; // Int!
    firstBloodAssist: boolean; // Boolean!
    firstBloodKill: boolean; // Boolean!
    firstInhibitorAssist: boolean; // Boolean!
    firstInhibitorKill: boolean; // Boolean!
    firstTowerAssist: boolean; // Boolean!
    firstTowerKill: boolean; // Boolean!
    goldEarned: number; // Int!
    goldSpent: number; // Int!
    id: number; // Int!
    inhibitorKills: number; // Int!
    item0: number; // Int!
    item1: number; // Int!
    item2: number; // Int!
    item3: number; // Int!
    item4: number; // Int!
    item5: number; // Int!
    item6: number; // Int!
    killingSprees: number; // Int!
    kills: number; // Int!
    largestCriticalStrike: number; // Int!
    largestKillingSpree: number; // Int!
    largestMultiKill: number; // Int!
    longestTimeSpentLiving: number; // Int!
    magicalDamageTaken: number; // Int!
    magicDamageDealt: number; // Int!
    magicDamageDealtToChampions: number; // Int!
    match: NexusGenRootTypes['Match']; // Match!
    matchHistoryUri: string; // String!
    neutralMinionsKilled: number; // Int!
    neutralMinionsKilledEnemyJungle: number; // Int!
    neutralMinionsKilledTeamJungle: number; // Int!
    objectivePlayerScore: number; // Int!
    participantId: number; // Int!
    pentaKills: number; // Int!
    perk0: number; // Int!
    perk0Var1: number; // Int!
    perk0Var2: number; // Int!
    perk0Var3: number; // Int!
    perk1: number; // Int!
    perk1Var1: number; // Int!
    perk1Var2: number; // Int!
    perk1Var3: number; // Int!
    perk2: number; // Int!
    perk2Var1: number; // Int!
    perk2Var2: number; // Int!
    perk2Var3: number; // Int!
    perk3: number; // Int!
    perk3Var1: number; // Int!
    perk3Var2: number; // Int!
    perk3Var3: number; // Int!
    perk4: number; // Int!
    perk4Var1: number; // Int!
    perk4Var2: number; // Int!
    perk4Var3: number; // Int!
    perk5: number; // Int!
    perk5Var1: number; // Int!
    perk5Var2: number; // Int!
    perk5Var3: number; // Int!
    perkPrimaryStyle: number; // Int!
    perkSubStyle: number; // Int!
    physicalDamageDealt: number; // Int!
    physicalDamageDealtToChampions: number; // Int!
    physicalDamageTaken: number; // Int!
    platformId: string; // String!
    playerScore0: number; // Int!
    playerScore1: number; // Int!
    playerScore2: number; // Int!
    playerScore3: number; // Int!
    playerScore4: number; // Int!
    playerScore5: number; // Int!
    playerScore6: number; // Int!
    playerScore7: number; // Int!
    playerScore8: number; // Int!
    playerScore9: number; // Int!
    position: string; // String!
    quadraKills: number; // Int!
    sightWardsBoughtInGame: number; // Int!
    skillOrder: string[]; // [String!]!
    spell1Id: number; // Int!
    spell2Id: number; // Int!
    statPerk0: number; // Int!
    statPerk1: number; // Int!
    statPerk2: number; // Int!
    summoner: NexusGenRootTypes['Summoner']; // Summoner!
    teamId: number; // Int!
    timeCCingOthers: number; // Int!
    totalDamageDealt: number; // Int!
    totalDamageDealtToChampions: number; // Int!
    totalDamageTaken: number; // Int!
    totalHeal: number; // Int!
    totalMinionsKilled: number; // Int!
    totalPlayerScore: number; // Int!
    totalScoreRank: number; // Int!
    totalTimeCrowdControlDealt: number; // Int!
    totalUnitsHealed: number; // Int!
    tripleKills: number; // Int!
    trueDamageDealt: number; // Int!
    trueDamageDealtToChampions: number; // Int!
    trueDamageTaken: number; // Int!
    turretKills: number; // Int!
    unrealKills: number; // Int!
    visionScore: number; // Int!
    visionWardsBoughtInGame: number; // Int!
    wardsKilled: number; // Int!
    wardsPlaced: number; // Int!
    win: boolean; // Boolean!
  }
  ParticipantFrame: { // field return type
    current_gold: number; // Int!
    id: number; // Int!
    jungle_minions_killed: number; // Int!
    level: number; // Int!
    match: NexusGenRootTypes['Match']; // Match!
    minions_killed: number; // Int!
    participant_id: number; // Int!
    position_x: number; // Int!
    position_y: number; // Int!
    timestamp: number; // Int!
    total_gold: number; // Int!
    xp: number; // Int!
  }
  Query: { // field return type
    allChampions: NexusGenRootTypes['Champion'][] | null; // [Champion!]
    allSummoners: NexusGenRootTypes['Summoner'][] | null; // [Summoner!]
    getQuickStats: NexusGenRootTypes['QuickStat'][] | null; // [QuickStat!]
    getSummonerParticipants: NexusGenRootTypes['Participant'][]; // [Participant!]!
    me: NexusGenRootTypes['User'] | null; // User
    summoner: NexusGenRootTypes['Summoner'] | null; // Summoner
  }
  QuickStat: { // field return type
    growth: number; // Int!
    icon: string; // String!
    significant: boolean; // Boolean!
    suffix: string; // String!
    title: string; // String!
    value: number; // Int!
  }
  Rune: { // field return type
    icon: string; // String!
    key: string; // String!
    longDesc: string; // String!
    name: string; // String!
    runeId: number; // Int!
    shortDesc: string; // String!
    version: string; // String!
  }
  Summoner: { // field return type
    accountId: string; // String!
    id: number; // Int!
    profileIconId: number; // Int!
    puuid: string; // String!
    server: string; // String!
    summonerId: string; // String!
    summonerLevel: number; // Int!
    summonerName: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  }
  SummonerSpell: { // field return type
    cooldown: number; // Int!
    cooldownBurn: string; // String!
    cost: number; // Int!
    costBurn: string; // String!
    costType: string; // String!
    description: string; // String!
    imageFull: string; // String!
    imageGroup: string; // String!
    imageH: number; // Int!
    imageSprite: string; // String!
    imageW: number; // Int!
    imageX: number; // Int!
    imageY: number; // Int!
    key: number; // Int!
    maxAmmo: string; // String!
    maxRank: number; // Int!
    name: string; // String!
    range: number; // Int!
    rangeBurn: string; // String!
    resource: string; // String!
    summonerLevel: number; // Int!
    summonerSpellId: string; // String!
    tooltip: string; // String!
    version: string; // String!
  }
  SystemStaticDataUpdate: { // field return type
    ChampionsUpdated: boolean; // Boolean!
    ItemsUpdated: boolean; // Boolean!
    LatestPatch: string; // String!
    RunesUpdated: boolean; // Boolean!
    SummonerSpellsUpdated: boolean; // Boolean!
  }
  Team: { // field return type
    bans: NexusGenRootTypes['Champion'][]; // [Champion!]!
    baronKills: number; // Int!
    dateCreated: any; // DateTime!
    dateModified: any; // DateTime!
    dominionVictoryScore: number; // Int!
    dragonKills: number; // Int!
    firstBaron: boolean; // Boolean!
    firstBlood: boolean; // Boolean!
    firstDragon: boolean; // Boolean!
    firstInhibitor: boolean; // Boolean!
    firstRiftHerald: boolean; // Boolean!
    firstTower: boolean; // Boolean!
    id: number; // Int!
    inhibitorKills: number; // Int!
    match: NexusGenRootTypes['Match'] | null; // Match
    riftHeraldKills: number; // Int!
    teamId: number; // Int!
    towerKills: number; // Int!
    vilemawKills: number; // Int!
    win: boolean; // Boolean!
  }
  User: { // field return type
    email: string; // String!
    isAdmin: boolean; // Boolean!
    summoners: NexusGenRootTypes['Summoner'][]; // [Summoner!]!
    userId: number; // Int!
    username: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Item: {
    builtFrom: { // args
      after?: NexusGenInputs['ItemWhereUniqueInput'] | null; // ItemWhereUniqueInput
      before?: NexusGenInputs['ItemWhereUniqueInput'] | null; // ItemWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
    builtInto: { // args
      after?: NexusGenInputs['ItemWhereUniqueInput'] | null; // ItemWhereUniqueInput
      before?: NexusGenInputs['ItemWhereUniqueInput'] | null; // ItemWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
  Mutation: {
    addSummonerToUser: { // args
      server: string; // String!
      summonerId: string; // String!
      userId?: number | null; // Int
    }
    login: { // args
      password: string; // String!
      username: string; // String!
    }
    signup: { // args
      email: string; // String!
      password: string; // String!
      username?: string | null; // String
    }
  }
  Query: {
    getQuickStats: { // args
      server: string; // String!
      summonerName: string; // String!
    }
    getSummonerParticipants: { // args
      accountId: string; // String!
      amount?: number | null; // Int
      server: string; // String!
      summonerId: string; // String!
    }
    summoner: { // args
      server: string; // String!
      summonerName: string; // String!
    }
  }
  Team: {
    bans: { // args
      after?: NexusGenInputs['ChampionWhereUniqueInput'] | null; // ChampionWhereUniqueInput
      before?: NexusGenInputs['ChampionWhereUniqueInput'] | null; // ChampionWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
  User: {
    summoners: { // args
      after?: NexusGenInputs['SummonerWhereUniqueInput'] | null; // SummonerWhereUniqueInput
      before?: NexusGenInputs['SummonerWhereUniqueInput'] | null; // SummonerWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Champion" | "Item" | "Match" | "MatchEvent" | "Mutation" | "Participant" | "ParticipantFrame" | "Query" | "QuickStat" | "Rune" | "Summoner" | "SummonerSpell" | "SystemStaticDataUpdate" | "Team" | "User";

export type NexusGenInputNames = "ChampionWhereUniqueInput" | "ItemWhereUniqueInput" | "ServerSummonerIdCompoundUniqueInput" | "ServerSummonerNameCompoundUniqueInput" | "SummonerWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}